var mindb=function(){"use strict";function n(n,e,t){var i=new s(n,e,t);return new Proxy(i,{get:function(n,e){return e in n?n[e]:"string"==typeof e&&-1!==n.list().indexOf(e)?n.get[e]:void 0}})}function e(n,e){var t=new u(n,e);return new Proxy(t,{get:function(n,e){return e in n?n[e]:"string"==typeof e&&-1!==n.list().indexOf(e)?n.get(e):void 0},set:function(n,e,t){throw new Error("Do not dynamically set values on a MinDB.Database instance.")}})}var t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},i=function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")},o=function(){function n(n,e){for(var t=0;t<e.length;t++){var i=e[t];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(n,i.key,i)}}return function(e,t,i){return t&&n(e.prototype,t),i&&n(e,i),e}}(),r=require("clone"),a=function(){function n(e,t){i(this,n),this._collection=e,this._data=t||{}}return o(n,[{key:"byId",value:function(n){var e=r(this._data,!1);return e.byId=n,e}}]),n}(),s=function(){function n(e,t,o){i(this,n),this._database=e,this._name=t,this._schema=o,this._documents={}}return o(n,[{key:"find",value:function(){return new a(this)}},{key:"findOne",value:function(n){if("string"!=typeof n)throw new Error('The document is must be a "string", not a "'+(void 0===n?"undefined":t(n))+'".');return this.find()}},{key:"get",value:function(n){if("string"!=typeof n)throw new Error('The document id must be a "string", not a "'+("undefined"==typeof name?"undefined":t(name))+'".');if(n in this._documents)return this._documents[n]}},{key:"insert",value:function(e){var i=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(!e._id)throw new Error("The document to be inserted has no '_id'.");if("string"!=typeof e._id)throw new Error('A document must have a "string" _id, not a "'+("undefined"==typeof name?"undefined":t(name))+'".');if(n._RESERVED.forEach(function(n){if(e._id===n)throw new Error("The document _id '"+e._id+"' is an internal reserved name and cannot be used.")}),!i&&e._id in this._documents)throw new Error("The document _id '"+e._id+"' already exists within the '"+this._name+"' collection.");return this._documents[e._id]=e,e}},{key:"list",value:function(){return Object.keys(this._documents)}},{key:"upsert",value:function(n){return this.insert(n,!0)}}]),n}();s._RESERVED=["_database","_name","_schema","_documents","get","insert","list","upsert"];var u=function(){function e(n,t){i(this,e),this._name=n,this._collections={},this._options=t}return o(e,[{key:"collection",value:function(i,o){if("string"!=typeof i)throw new Error('The collection name must be a "string", not "'+(void 0===i?"undefined":t(i))+'".');if(e._RESERVED.forEach(function(n){if(i===n)throw new Error("Collection name '"+i+"' is an internal reserved name and cannot be used.")}),i in this._collections)throw new Error("A collection with name '"+i+"' already exists on database '"+this._name+"'.");var r=n(this,i,o);return this._collections[i]=r,r}},{key:"get",value:function(n){if("string"!=typeof n)throw new Error('The collection name must be a "string", "not a "'+(void 0===n?"undefined":t(n))+'".');if(n in this._collections)return this._collections[n];throw new Error("Collection name '"+n+"' has not been created and does not exist on database '"+this._name+"'.")}},{key:"list",value:function(){return Object.keys(this._collections)}}]),e}();u._RESERVED=["_collections","_name","_options","collection","get","list"];var c=function(){function n(){i(this,n),this._databases={}}return o(n,[{key:"create",value:function(i){if("string"!=typeof i)throw new Error('The database name must be a "string", not "'+(void 0===i?"undefined":t(i))+'".');if(n._RESERVED.forEach(function(n){if(i===n)throw new Error("Database name '"+i+"' is an internal reserved name and cannot be used.")}),i in this._databases)throw new Error("A database with name '"+i+"' already exists.");var o=e(i);return this._databases[i]=o,o}},{key:"get",value:function(n){if("string"!=typeof n)throw new Error('The database name must be a "string", "not a "'+(void 0===n?"undefined":t(n))+'".');if(n in this._databases)return this._databases[n];throw new Error("Database name '"+n+"' has not been created and does not exist.")}},{key:"list",value:function(){return Object.keys(this._databases)}}]),n}();return c._RESERVED=["_databases","create","get","list"],new Proxy(new c,{get:function(n,e){return e in n?n[e]:"string"==typeof e&&-1!==n.list().indexOf(e)?n.get(e):void 0},set:function(n,e,t){throw new Error("Do not dynamically set values on MinDB.")}})}();
